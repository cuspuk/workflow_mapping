reads: # Specify the order and methods for each read processing step. If no method is specified, the step will not be performed.
  subsampling: null # null/enum: Subsampling method, if not set, subsampling will not be performed. Allowed: 'seqtk'.
  trimming: "cutadapt" # null/enum: Trimming method, if not set, trimming will not be performed. Allowed: 'cutadapt'.
  decontamination: "kraken" # null/enum: Decontamination method, if not set, decontamination will not be performed. Allowed: 'kraken', 'bwa'.
  deduplication: null # null/enum: Deduplication method, if not set, deduplication will not be performed. Allowed: 'fastuniq'.
  _generate_fastqc_for: ["original", "decontamination"] # list of enum: Specify which steps to generate fastqc for. Allowed: 'original','subsampling','trimming','decontamination','deduplication'.

mapping:
  _input: "reads" # enum(reads): Input data for mapping. Allowed: 'reads' or 'assembly'.
  mapping: "bwa" # enum(bwa): Mapping tool to use. Allowed: 'bwa', 'hisat2'.
  reference_fasta_paths: ["example.fa"] # list of min 1 str(['example.fa']): References to map against. Provide paths to the reference fasta files.
  deduplication: "picard" # null/enum: Deduplication method to use. Allowed: 'picard'.
  _generate_qualimap: true # bool(true): If true, qualimap will be generated for the last step.

assembly: # Uses processed reads. If no assembly method is specified, the step will not be performed.
  assembly: "spades" # null/enum: Assembly tool to use. Allowed: 'spades'.
  report: ["quast", "bandage"] # list of enum([]): Reporting tool for assembly QC. Allowed: 'bandage','quast'.
  classification: ["blast"] # list of enum([]): Classification method to use for contigs. Allowed: 'blast'.

# HYPERPARAMETERS

reads__subsampling__seqtk: # Relevant only if reads->subsampling is set to seqtk.
  seed: 1 # int(1): Seed value to use for random number generator.
  n_reads: TO_BE_DEFINED # int: Number of reads to subsample.
  reduce_memory: true # bool(true): Set to 2-pass mode, slower but with less memory used.

reads__trimming__cutadapt: # Relevant only if reads->trimming is set to cutadapt.
  cut_from_start_r1: null # null/int: Removes a specified number of bases from the beginning of the R1 read.
  cut_from_start_r2: null # null/int: Removes a specified number of bases from the beginning of the R2 read.
  cut_from_end_r1: null # null/int: Removes a specified number of bases from the end of the R1 read.
  cut_from_end_r2: null # null/int: Removes a specified number of bases from the end of the R2 read.
  quality_cutoff_from_3_end_r1: 20 # int(20): Removes lower quality bases from the 3' end of the R1 read.
  quality_cutoff_from_5_end_r1: 20 # int(20): Removes lower quality bases from the 5' end of the R1 read.
  quality_cutoff_from_3_end_r2: 20 # int(20): Removes lower quality bases from the 3' end of the R2 read.
  quality_cutoff_from_5_end_r2: 20 # int(20): Removes lower quality bases from the 5' end of the R2 read.
  nextseq_trimming_mode: false # bool(false): Modify quality-trimming algorithm to expect two-color chemistry data (NextSeq).
  do_adapter_removal: false # bool(false): Whether to do adapter removal or not.
  adapter_removal: # Relevant only if do_adapter_removal is set to true.
    action: "trim" # enum(trim): Defines an action to perform with the found adapter. Allowed: 'retain','trim','mask','none','lowercase'.
    overlap: 3 # int(3): Minimum number of bases required to overlap with the adapter.
    error_rate: 0.1 # float(0.1): Error tolerance used when searching for adapter.
    times: 1 # int(1): How many times to repeat adapter removal.
    keep_trimmed_only: false # bool(false): Discard reads with no adapters found.
    adapters_anywhere_file: TO_BE_DEFINED # null/str: Fasta file path with adapters to be matched 'anywhere'.
    adapters_3_end_file: TO_BE_DEFINED # null/str: Fasta file path with adapters to be matched at 3'end.
    adapters_5_end_file: TO_BE_DEFINED # null/str: Fasta file path with adapters to be matched at 5'end.
  shorten_to_length: null # null/int: Shorten each read to the specified length. Corresponds to the cutadapt length parameter.
  shorten_to_length_r2: null # null/int: Shorten each R2 read to the specified length. If not specified, 'shorten_to_length' is applied for R2 as well.
  trim_N_bases_on_ends: false # bool(false): Set to true to trim 'N' bases on ends.
  min_length_r1: 45 # null/int: Discards R1 reads shorter than this. Recommended to set at least to 1, to discard empty reads.
  min_length_r2: 45 # null/int: Discards R2 reads shorter than this. Recommended to set at least to 1, to discard empty reads.
  max_length_r1: null # null/int: Discards R1 reads longer than this value.
  max_length_r2: null # null/int: Discards R2 reads longer than this value.
  max_n_bases: null # null/int: Removes reads with more 'N' bases than the specified number.
  max_expected_errors: null # null/int: Discard reads whose expected number of errors exceeds this value.
  max_average_error_rate: null # null/float: Discard reads whose average error rate exceeds this value. Between 0 and 1.

reads__decontamination__kraken: # Relevant only if reads->decontamination is set to kraken.
  kraken_dir: "/data/genome/metagenome/kraken/k2_pluspf_20240112" # str: Directory with the kraken DB files. If does not exist, the workflow tries to download DB by using the basename. See https://benlangmead.github.io/aws-indexes/k2.
  exclude_taxa_ids: [9606] # list of min 1 int([9606]): List of taxonomy IDs for excluding logic. Example: 9606 - Homo Sapiens of rank=species.
  exclude_children: false # bool(false): Whether to exclude reads classified at more specific levels than specified taxonomy ID levels.
  exclude_ancestors: false # bool(false): Whether to exclude reads classified at all taxonomy levels between root and the specified taxonomy ID levels.
  save_memory: true # bool(true): If true, kraken limits RAM memory usage but sacrifices speed.
  generate_krona: false # bool(false): If true, krona is generated from kraken report.
  krona_dir: "/data/genome/taxonomy/krona/2023-12-03/" # null/str: Directory where krona dataset is located, or where will be downloaded.

reads__decontamination__bwa: # Relevant only if reads->decontamination is set to bwa.
  references: # list of min 1 str: List of reference fasta files.
    - "/data/genome/human/grch38/grch38.fa"
  filter_mode: "exclude" # enum(exclude): Mapped reads are either excluded or included. Allowed: 'include','exclude'.

reads__deduplication__fastuniq: {} # Relevant only if reads->deduplication is set to fastuniq. There are no parameters to be defined.

mapping__mapping__minimap2: # Relevant only if mapping->mapping is set to minimap2.
  preset: TO_BE_DEFINED # enum: Mapping preset options. Allowed: 'sr', 'map-ont', 'map-hifi', 'map-pb', 'asm5', 'asm10', 'asm20', 'splice', 'splice:hq', 'splice:sr', 'ava-pb', 'ava-ont', 'lr:hq', 'map-iclr'.

assembly__assembly__spades:
  mode: "isolate" # enum(isolate): Allowed: "isolate", "sc", "plasmid", "meta", "metaplasmid", "metaviral", "rna", "rnaviral", "bio", "corona", "sewage".
  careful: false # bool(false): When set to true, spades tries to reduce number of mismatches and short indels, but it has longer runtime.

assembly__report__quast:
  min_contig_length: 500 # int(500): Minimum length in bp of contigs to evaluate in metrics.
  extra: "" # str: Specify any extra parameters for QUAST per manual.

assembly__classification__blast:
  db_dir: "/data/genome/blast/{BLAST_DB_TAG}/{TIMESTAMP}" # str: Directory path where Blast DB is located, or where will be downloaded. For BLAST TAG use: "18S_fungal_sequences" "Betacoronavirus" "ref_viroids_rep_genomes" "ref_viruses_rep_genomes" "refseq_select_rna" "refseq_select_prot" "refseq_protein" "refseq_rna" "16S_ribosomal_RNA" "ITS_RefSeq_Fungi" "28S_fungal_sequences" "ITS_eukaryote_sequences" "LSU_eukaryote_rRNA" "LSU_prokaryote_rRNA" "SSU_eukaryote_rRNA" "env_nt" "env_nr" "human_genome" "landmark" "mito" "mouse_genome" "nr" "nt_euk" "nt" "nt_others" "swissprot" "tsa_nr" "tsa_nt" "taxdb" "nt_prok" "nt_viruses" "pataa" "patnt" "pdbaa" "pdbnt" "ref_euk_rep_genomes" "ref_prok_rep_genomes.
  query_vs_db: "nucleotide-nucleotide" # enum: Type of DB and type of input sequences, used to infer blast binary. Allowed: 'nucleotide-nucleotide','nucleotide-protein','protein-protein','protein-nucleotide'.
  max_number_of_hits: 5 # int: DESCRIPTION_MISSING.
  max_query_seqs: 2000 # int: Maximal number of contigs to report, ordered by their length.
  max_target_seqs: 5 # int: Maximal number of homologues from reference genomes to report.
  min_query_coverage: 0.01 # float: Show only hits that have at least this proportion of contig mapped to reference.
  seqs_per_page: 100 # int: Number of table rows (sequences) per page.

# RESOURCES

max_threads: 8 # int(8): Number of maximum threads to use in jobs.
max_mem_mb: 16384 # int(16384): Maximum memory in megabytes to allocate for any job.
resources:
  reads__trimming_mem_mb: 4096 # int(4096): Memory in MB to reserve for trimming.
  reads__fastqc_mem_mb: 2048 # int(2048): Memory in MB to reserve for fastqc.
  mapping__mapping_mem_mb: 8192 # int(8192): Memory in MB to reserve for mapping.
  mapping__indexing_mem_mb: 4096 # int(4096): Memory in MB to reserve for bam_index.
  mapping__deduplication_mem_mb: 8192 # int(8192): Memory in MB to reserve for picard.
  mapping__qualimap_mem_mb: 4096 # int(4096): Memory in MB to reserve for qualimap.
  assembly__assembly_mem_mb: 64000 # int(64000): Memory in MB to reserve for assembly.
  assembly__classification_mem_mb: 32000 # int(32000): Memory in MB to reserve for classification.

threads:
  reads__trimming: 4 # int(4): Number of threads to use for trimming.
  reads__deduplication: 4 # int(4): Number of threads to use for deduplication.
  reads__decontamination: 8 # int(8): Number of threads to use for decontamination.
  reads__fastqc: 1 # int(1): Number of threads to use for fastqc.
  mapping__mapping: 4 # int(4): Number of threads to use for mapping.
  mapping__indexing: 2 # int(2): Number of threads to use for bam_index.
  assembly__assembly: 16 # int(16): Number of threads to use for assembly.
  assembly__classification: 8 # int(8): Number of threads to use for classification.
  assembly__report: 2 # int(2): Number of threads to use for reporting.

module_versions:
  reads: "v3.7.0" # str(v3.7.0): Version of reads module.
